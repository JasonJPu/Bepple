char *clockIconBinary[] = {
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000001", "10000000", "01000000",
  "00000010", "00000001", "10000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "01100001", "10000011", "01000000",
  "00000010", "01100001", "10000011", "01000000",
  "00000010", "00000010", "01100000", "01000000",
  "00000010", "00000100", "00010000", "01000000",
  "00000010", "00001000", "00000000", "01000000",
  "00000010", "00010000", "00000000", "01000000",
  "00000010", "00100000", "00000000", "01000000",
  "00000010", "00000001", "10000000", "01000000",
  "00000010", "00000001", "10000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000"
};

char *levelIconBinary[] = {
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "11111111", "11111111", "01000000",
  "00000010", "00000011", "11000000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000011", "11000000", "01000000",
  "00000010", "11111111", "11111111", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000100", "00100000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000"
};

char *magicIconBinary[] = {
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000010", "00000011", "11000000", "01000000",
  "00000010", "00011100", "00111000", "01000000",
  "00000010", "00100000", "00000100", "01000000",
  "00000010", "01000000", "00000010", "01000000",
  "00000010", "10000000", "00000001", "01000000",
  "00000010", "10000000", "00000001", "01000000",
  "00000010", "10001100", "00110001", "01000000",
  "00000011", "00010010", "01001000", "11000000",
  "00000011", "00100001", "10000100", "11000000",
  "00000011", "00100001", "10000100", "11000000",
  "00000011", "00010010", "01001000", "11000000",
  "00000010", "10001100", "00110001", "01000000",
  "00000010", "10000000", "00000001", "01000000",
  "00000010", "10000000", "00000001", "01000000",
  "00000010", "01000000", "00000010", "01000000",
  "00000010", "00100000", "00000100", "01000000",
  "00000010", "00011100", "00111000", "01000000",
  "00000010", "00000011", "11000000", "01000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000"
};

char *turretIconBinary[] = {
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "11110000", "00000000", "01000000",
  "00000010", "11110000", "00000000", "01000000",
  "00000010", "11110000", "00000000", "01000000",
  "00000010", "11111000", "00000000", "01000000",
  "00000010", "00001100", "00000000", "01000000",
  "00000010", "00000100", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000010", "00000000", "10000000", "01000000",
  "00000010", "00000001", "11000000", "01000000",
  "00000010", "00000000", "10000000", "01000000",
  "00000010", "00000000", "00001100", "01000000",
  "00000010", "00000000", "00011110", "01000000",
  "00000010", "00111100", "00111111", "01000000",
  "00000010", "00111100", "00001110", "01000000",
  "00000010", "00111100", "00000100", "01000000",
  "00000010", "00111100", "00000000", "01000000",
  "00000010", "00000000", "00000000", "01000000",
  "00000011", "11111111", "11111111", "11000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000",
  "00000000", "00000000", "00000000", "00000000"
};

//Declared in Bepple
//char clockIconBitmap[32 * 4];
//char levelIconBitmap[32 * 4];
//char magicIconBitmap[32 * 4];
//char turretIconBitmap[32 * 4];

void IconInit(){
  binaryToBitmap(clockIconBinary, clockIconBitmap, 32 * 4);
  binaryToBitmap(levelIconBinary, levelIconBitmap, 32 * 4);
  binaryToBitmap(magicIconBinary, magicIconBitmap, 32 * 4);
  binaryToBitmap(turretIconBinary, turretIconBitmap, 32 * 4);
}

void drawCursor(int i){
  //Top left
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + j, 0);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + j, 1);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 4; j++){
    OrbitOledMoveTo(i * 32, 2 + j);
    OrbitOledDrawPixel();
    OrbitOledMoveTo(i * 32 + 1, 2 + j);
    OrbitOledDrawPixel();
  }

  //Top Right
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + 25 + j, 0);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + 25 + j, 1);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 4; j++){
    OrbitOledMoveTo(i * 32 + 29, 2 + j);
    OrbitOledDrawPixel();
    OrbitOledMoveTo(i * 32 + 30, 2 + j);
    OrbitOledDrawPixel();
  }

  //Bottom Left
  for(int j = 0; j < 4; j++){
    OrbitOledMoveTo(i * 32, 26 + j);
    OrbitOledDrawPixel();
    OrbitOledMoveTo(i * 32 + 1, 26 + j);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + j, 30);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + j, 31);
    OrbitOledDrawPixel();
  }

  //Bottom Right
  for(int j = 0; j < 4; j++){
    OrbitOledMoveTo(i * 32 + 29, 26 + j);
    OrbitOledDrawPixel();
    OrbitOledMoveTo(i * 32 + 30, 26 + j);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + 25 + j, 30);
    OrbitOledDrawPixel();
  }
  for(int j = 0; j < 6; j++){
    OrbitOledMoveTo(i * 32 + 25 + j, 31);
    OrbitOledDrawPixel();
  }
}

